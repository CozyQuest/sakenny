using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using sakenny.DAL.Models;

namespace sakenny.Models
{
    class PropertySnapshotConfiguration : IEntityTypeConfiguration<PropertySnapshot>
    {
        public void Configure(EntityTypeBuilder<PropertySnapshot> builder)
        {
            builder.HasKey(a => a.Id);

            // Property constraints
            builder.Property(a => a.Title).IsRequired().HasMaxLength(50);
            builder.Property(a => a.Description).IsRequired().HasMaxLength(500);
            builder.Property(a => a.Longitude).HasColumnType("decimal(18,10)");
            builder.Property(a => a.Latitude).HasColumnType("decimal(18,10)");
            builder.Property(a => a.Price).HasColumnType("decimal(18,2)");
            builder.Property(p => p.Country).IsRequired();
            builder.Property(p => p.City).IsRequired();
            builder.Property(p => p.District).IsRequired();
            builder.Property(p => p.CreatedAt).IsRequired();

            builder.HasQueryFilter(a => !a.IsDeleted);

            // ✅ Use NoAction instead of Restrict
            builder.HasOne(ps => ps.PropertyPermit)
                .WithOne(pp => pp.PropertySnapshot)
                .HasForeignKey<PropertySnapshot>(ps => ps.PropertyPermitId)
                .OnDelete(DeleteBehavior.NoAction); // ✅ Changed to NoAction

            // ✅ Use NoAction for Property relationship  
            builder.HasOne(ps => ps.Property)
                .WithMany(p => p.PropertySnapshots)
                .HasForeignKey(ps => ps.PropertyId)
                .OnDelete(DeleteBehavior.NoAction); // ✅ Changed to NoAction

            builder.HasOne(ps => ps.User)
                .WithMany()
                .HasForeignKey(ps => ps.UserId)
                .OnDelete(DeleteBehavior.NoAction); // ✅ Changed to NoAction

            builder.HasOne(ps => ps.PropertyType)
                .WithMany()
                .HasForeignKey(ps => ps.PropertyTypeId)
                .OnDelete(DeleteBehavior.NoAction); // ✅ Changed to NoAction

            builder.HasOne(ps => ps.MainImage)
                .WithMany()
                .HasForeignKey(ps => ps.MainImageId)
                .OnDelete(DeleteBehavior.NoAction); // ✅ Changed to NoAction

            // Many-to-Many relationship with Services
            builder.HasMany(ps => ps.Services)
                .WithMany(s => s.PropertySnapshots)
                .UsingEntity(
                    "PropertySnapshotService",
                    l => l.HasOne(typeof(Service)).WithMany().HasForeignKey("ServiceId"),
                    r => r.HasOne(typeof(PropertySnapshot)).WithMany().HasForeignKey("PropertySnapshotId"));
        }
    }
}
